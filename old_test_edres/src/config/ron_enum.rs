# ! [cfg_attr (rustfmt , rustfmt_skip)] # ! [allow (dead_code)] # [derive (Debug , Clone , Copy , PartialEq , Eq , PartialOrd , Ord , Hash , serde :: Serialize , serde :: Deserialize)] pub enum RonEnum { A , B , C , } impl RonEnum { pub const ALL : & 'static [RonEnum] = & [RonEnum :: A , RonEnum :: B , RonEnum :: C ,] ; } impl Default for RonEnum { fn default () -> Self { Self :: A } } impl std :: fmt :: Display for RonEnum { fn fmt (& self , f : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { write ! (f , "{:?}" , self) } } impl std :: str :: FromStr for RonEnum { type Err = () ; fn from_str (s : & str) -> Result < Self , Self :: Err > { const STRINGS : & 'static [& 'static str] = & ["A" , "B" , "C" ,] ; for (index , & key) in STRINGS . iter () . enumerate () { if key == s { return Ok (RonEnum :: ALL [index]) ; } } Err (()) } }